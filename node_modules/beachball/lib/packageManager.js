"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
function npm(args, options) {
    const npmCmd = os_1.default.platform() === 'win32' ? 'npm.cmd' : 'npm';
    const results = child_process_1.spawnSync(npmCmd, args, options);
    if (results.status === 0) {
        return {
            stderr: results.stderr.toString().trim(),
            stdout: results.stdout.toString().trim(),
            success: true
        };
    }
    else {
        return {
            stderr: results.stderr.toString().trim(),
            stdout: results.stdout.toString().trim(),
            success: false
        };
    }
}
exports.npm = npm;
function packagePublish(packageInfo, registry, token, tag, access) {
    const packagePath = path_1.default.dirname(packageInfo.packageJsonPath);
    const args = ['publish', '--registry', registry, '--tag', tag];
    if (token) {
        const shorthand = registry.substring(registry.indexOf('//'));
        args.push(`--${shorthand}:_authToken=${token}`);
    }
    if (access && packageInfo.name.startsWith('@')) {
        args.push('--access');
        args.push(access);
    }
    console.log(`publish command: ${args.join(' ')}`);
    return npm(args, { cwd: packagePath });
}
exports.packagePublish = packagePublish;
const packageVersions = {};
function listPackageVersions(packageName, registry) {
    if (!packageVersions[packageName]) {
        const showResult = npm(['show', '--registry', registry, '--json', packageName]);
        if (showResult.success) {
            const packageInfo = JSON.parse(showResult.stdout);
            packageVersions[packageName] = packageInfo.versions;
        }
        else {
            packageVersions[packageName] = [];
        }
    }
    return packageVersions[packageName];
}
exports.listPackageVersions = listPackageVersions;
