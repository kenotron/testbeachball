"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const changefile_1 = require("./changefile");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const tag_1 = require("./tag");
function getPackageChangelogs(packageInfos, cwd) {
    const changes = changefile_1.readChangeFiles(cwd);
    const changelogs = {};
    changes.forEach(change => {
        const { packageName } = change;
        changelogs[packageName] = changelogs[packageName] || {
            name: packageName,
            version: packageInfos[packageName].version,
            date: new Date()
        };
        changelogs[packageName].comments = changelogs[packageName].comments || {};
        changelogs[packageName].comments[change.type] = changelogs[packageName].comments[change.type] || [];
        changelogs[packageName].comments[change.type].push({
            comment: change.comment,
            author: change.email,
            commit: change.commit
        });
    });
    return changelogs;
}
exports.getPackageChangelogs = getPackageChangelogs;
function writeChangelog(packageInfos, cwd) {
    const changelogs = getPackageChangelogs(packageInfos, cwd);
    Object.keys(changelogs).forEach(pkg => {
        const packagePath = path_1.default.dirname(packageInfos[pkg].packageJsonPath);
        if (changelogs[pkg].comments.major || changelogs[pkg].comments.minor || changelogs[pkg].comments.patch || changelogs[pkg].comments.prerelease) {
            const changelogFile = path_1.default.join(packagePath, 'CHANGELOG.md');
            const previousContent = fs_1.default.existsSync(changelogFile) ? fs_1.default.readFileSync(changelogFile).toString() : '';
            const nextContent = renderChangelog(previousContent, changelogs[pkg]);
            fs_1.default.writeFileSync(changelogFile, nextContent);
        }
        try {
            const changelogJsonFile = path_1.default.join(packagePath, 'CHANGELOG.json');
            const previousJson = fs_1.default.existsSync(changelogJsonFile) ? JSON.parse(fs_1.default.readFileSync(changelogJsonFile).toString()) : { entries: [] };
            const nextJson = renderJsonChangelog(previousJson, changelogs[pkg]);
            fs_1.default.writeFileSync(changelogJsonFile, JSON.stringify(nextJson, null, 2));
        }
        catch (e) {
            console.warn('The CHANGELOG.json file is invalid, skipping writing to it', e);
        }
    });
    changefile_1.unlinkChangeFiles(cwd);
}
exports.writeChangelog = writeChangelog;
function renderJsonChangelog(previous, changelog) {
    const result = {
        name: changelog.name,
        entries: [...previous.entries] || []
    };
    const newEntry = {
        date: changelog.date.toUTCString(),
        tag: tag_1.generateTag(changelog.name, changelog.version),
        version: changelog.version,
        comments: changelog.comments
    };
    result.entries.unshift(newEntry);
    return result;
}
function renderChangelog(previous, changelog) {
    const previousLogEntries = previous ? '\n' + previous.substring(previous.indexOf('##')) : '';
    return (`# Change Log - ${changelog.name}\n\n` +
        `This log was last generated on ${changelog.date.toUTCString()} and should not be manually modified.\n` +
        renderPackageChangelog(changelog) +
        previousLogEntries);
}
function renderPackageChangelog(changelog) {
    return (`\n## ${changelog.version}\n` +
        `${changelog.date.toUTCString()}\n` +
        (changelog.comments.major
            ? '\n### Major\n\n' + changelog.comments.major.map(change => `- ${change.comment} (${change.author})\n`)
            : '') +
        (changelog.comments.minor
            ? '\n### Minor changes\n\n' + changelog.comments.minor.map(change => `- ${change.comment} (${change.author})\n`)
            : '') +
        (changelog.comments.patch
            ? '\n### Patches\n\n' + changelog.comments.patch.map(change => `- ${change.comment} (${change.author})\n`)
            : '') +
        (changelog.comments.prerelease
            ? '\n### Changes\n\n' + changelog.comments.prerelease.map(change => `- ${change.comment} (${change.author})\n`)
            : ''));
}
