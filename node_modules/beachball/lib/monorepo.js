"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const paths_1 = require("./paths");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const git_1 = require("./git");
function getAllPackages(cwd) {
    const infos = getPackageInfos(cwd);
    return Object.keys(infos);
}
exports.getAllPackages = getAllPackages;
function infoFromPackageJson(packageJson, packageJsonPath) {
    return {
        name: packageJson.name,
        version: packageJson.version,
        packageJsonPath,
        dependencies: packageJson.dependencies,
        devDependencies: packageJson.devDependencies,
        disallowedChangeTypes: packageJson.beachball && packageJson.beachball.disallowedChangeTypes
            ? packageJson.beachball.disallowedChangeTypes
            : []
    };
}
function getPackageInfos(cwd) {
    const trackedFiles = git_1.listAllTrackedFiles(cwd);
    const packageJsonFiles = trackedFiles.filter(file => path_1.default.basename(file) === 'package.json');
    const packageInfos = {};
    if (packageJsonFiles && packageJsonFiles.length > 0) {
        packageJsonFiles.forEach(packageJsonPath => {
            try {
                const packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, 'utf-8'));
                packageInfos[packageJson.name] = infoFromPackageJson(packageJson, packageJsonPath);
            }
            catch (e) {
                // Pass, the package.json is invalid
                console.warn(`Invalid package.json file detected ${packageJsonPath}`);
            }
        });
    }
    else {
        const packageJsonPath = path_1.default.join(paths_1.findPackageRoot(cwd), 'package.json');
        const packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, 'utf-8'));
        packageInfos[packageJson.name] = infoFromPackageJson(packageJson, packageJsonPath);
    }
    return packageInfos;
}
exports.getPackageInfos = getPackageInfos;
